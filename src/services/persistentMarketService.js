import { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } from 'discord.js';
import { UI_CONSTANTS, EMBED_COLORS } from '../utils/constants.js';
import { ListingService } from './simpleListingService.js';
import { AuctionService } from './simpleAuctionService.js';
import db from '../database/jsonDb.js';
import logger from '../utils/logger.js';

export class PersistentMarketService {
  constructor(client) {
    this.client = client;
    this.listingService = new ListingService();
    this.auctionService = new AuctionService();
    this.updateQueue = new Set(); // –û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
  }

  async updatePersistentMarket(force = false) {
    try {
      const persistentMessage = db.getPersistentMessage('market');
      
      if (!persistentMessage) {
        return; // No persistent message set up
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ä—ã–Ω–æ–∫
      if (!force && this.updateQueue.has('market')) {
        return; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      }

      this.updateQueue.add('market');

      const channel = await this.client.channels.fetch(persistentMessage.channelId);
      if (!channel) {
        logger.warn(`Persistent market channel ${persistentMessage.channelId} not found`);
        return;
      }

      const message = await channel.messages.fetch(persistentMessage.messageId);
      if (!message) {
        logger.warn(`Persistent market message ${persistentMessage.messageId} not found`);
        return;
      }

      // Get updated market stats
      const [listingStats, auctionStats] = await Promise.all([
        this.listingService.getListingStats(),
        this.auctionService.getAuctionStats(),
      ]);

      const imageUrl = 'https://cdn.discordapp.com/attachments/1423960996547924009/1424077421715652668/126-1921x1080-desktop-hd-skyrim-wallpaper-image.jpg?ex=68e2a2f3&is=68e15173&hm=995e0f273f4985292377b6c7f42388f0ba0afd2fd8ffb30abb71bb9761d1f165&';

      // –ü–µ—Ä–≤—ã–π —ç–º–±–µ–¥ - —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞
      const imageEmbed = new EmbedBuilder()
        .setImage(imageUrl)
        .setColor(0x7b9e1e);

      // –í—Ç–æ—Ä–æ–π —ç–º–±–µ–¥ - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
      const embed = new EmbedBuilder()
        .setDescription(`\`\`\` ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –†—ã–Ω–æ–∫ –ú–∞—Ä–∫–∞—Ä—Ç–∞ ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä \`\`\`

–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞–º–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏`)
        .setColor(0x7b9e1e)
        .addFields(
          {
            name: '**–ë–∞—Ä–æ–Ω**',
            value: `\`\`\`ansi
  [2;32m[1;32m[4;32m[1;32m[0m[4;32m[0m[1;32m[0m[2;32m–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ú–∞—Ä–∫–∞—Ä—Ç–∞. –ü–æ–º–∏–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–∏—Å–∫–æ—Ä–¥. –ë–∞—Ä–æ–Ω –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∑–∞–π–º—ã –∏–ª–∏ —Ä–∞–∑–º–µ–Ω–∏–≤–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ö –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞.\`\`\``,
            inline: false,
          },
          {
            name: '**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç**',
            value: `**–ü–æ–∫—É–ø–∫–∞**
<:1_:1423962783535337552> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ‚Üí –°–æ–∑–¥–∞—ë—Ç—Å—è –≤–µ—Ç–∫–∞

**–ü—Ä–æ–¥–∞–∂–∞**
<:1_:1423962783535337552> –°–æ–∑–¥–∞–π—Ç–µ –ª–æ—Ç ‚Üí <:6_:1423966899443601449> –ñ–¥–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π

**–ê—É–∫—Ü–∏–æ–Ω—ã**
<:1_:1423962783535337552> <:6_:1423966899443601449> –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç–æ—Ä–≥–∞—Ö`,
            inline: false,
          }
        )
        .setImage('https://cdn.discordapp.com/attachments/1423960996547924009/1424764693888897126/f39a806ba38943de1b7dd60db0c63cdd881f408f2faf9d5afe95edd5795e9143.gif?ex=68e52305&is=68e3d185&hm=98812ed949c63c86270cc6e2e6b619136d26c4b5da2edd66f60b6ebba08a83b5&');


      const row1 = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId(UI_CONSTANTS.BUTTON_IDS.BUY)
            .setLabel('–ö—É–ø–∏—Ç—å')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('1423965832740081684'),
          new ButtonBuilder()
            .setCustomId(UI_CONSTANTS.BUTTON_IDS.SELL)
            .setLabel('–ü—Ä–æ–¥–∞—Ç—å')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('1423966433884373052'),
          new ButtonBuilder()
            .setCustomId(UI_CONSTANTS.BUTTON_IDS.AUCTION)
            .setLabel('–ê—É–∫—Ü–∏–æ–Ω—ã')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('1423965583963328633')
        );

      const row2 = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId(UI_CONSTANTS.BUTTON_IDS.DEALS)
            .setLabel('–°–¥–µ–ª–∫–∏')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('1423975784292552765'),
          new ButtonBuilder()
            .setCustomId('market_stats')
            .setLabel('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('1423973804467814400'),
          new ButtonBuilder()
            .setCustomId('market_help')
            .setLabel('–ü–æ–º–æ—â—å')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('1423974435228225556')
        );

      await message.edit({
        embeds: [imageEmbed, embed],
        components: [row1, row2],
      });

      logger.info('Persistent market message updated successfully');

    } catch (error) {
      logger.error('Error updating persistent market:', error);
    } finally {
      // –£–±–∏—Ä–∞–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      this.updateQueue.delete('market');
    }
  }

  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
  async instantUpdate() {
    await this.updatePersistentMarket(true);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞)
  async delayedUpdate(delay = 2000) {
    setTimeout(async () => {
      await this.updatePersistentMarket();
    }, delay);
  }

  async setupAutoUpdate() {
    // Update every 5 minutes
    setInterval(() => {
      this.updatePersistentMarket();
    }, 5 * 60 * 1000);

    logger.info('Persistent market auto-update started (every 5 minutes)');
  }
}
