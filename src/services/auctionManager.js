import db from '../database/jsonDb.js';
import logger from '../utils/logger.js';

export class AuctionManager {
  constructor(client) {
    this.client = client;
    this.checkInterval = 30000; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    this.isRunning = false;
  }

  start() {
    if (this.isRunning) return;
    
    this.isRunning = true;
    logger.info('AuctionManager started');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    this.checkAuctions();
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    this.interval = setInterval(() => {
      this.checkAuctions();
    }, this.checkInterval);
  }

  stop() {
    if (!this.isRunning) return;
    
    this.isRunning = false;
    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
    logger.info('AuctionManager stopped');
  }

  async checkAuctions() {
    try {
      const now = new Date();
      const activeAuctions = Array.from(db.data.auctions.values())
        .filter(auction => 
          auction.status === 'ACTIVE' && 
          new Date(auction.endTime) <= now
        );

      for (const auction of activeAuctions) {
        await this.endAuction(auction);
      }
    } catch (error) {
      logger.error('Error checking auctions:', error);
    }
  }

  async endAuction(auction) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
      const fullAuction = db.data.auctions.get(auction.id);
      if (!fullAuction) {
        logger.error(`Auction ${auction.id} not found in database`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞
      const creator = db.data.users.get(fullAuction.creatorId);
      if (!creator) {
        logger.error(`Creator ${fullAuction.creatorId} not found for auction ${auction.id}`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
      const bids = db.getAuctionBids(auction.id);
      
      if (bids.length === 0) {
        // –ù–µ—Ç —Å—Ç–∞–≤–æ–∫ - –∞—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        db.updateAuctionStatus(auction.id, 'ENDED_NO_BIDS');
        logger.info(`Auction ${auction.id} ended with no bids`);
        
        await this.notifyAuctionEnd(fullAuction, creator, null, bids);
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Å—Ç–∞–≤–∫–∞)
      const winner = bids[0]; // bids —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É–∫—Ü–∏–æ–Ω–∞
      db.updateAuctionStatus(auction.id, 'ENDED');
      db.setAuctionWinner(auction.id, winner.bidderId, winner.amount);
      
      logger.info(`Auction ${auction.id} ended. Winner: ${winner.bidder.discordId} with ${winner.amount} coins`);
      
      await this.notifyAuctionEnd(fullAuction, creator, winner, bids);
      
    } catch (error) {
      logger.error(`Error ending auction ${auction.id}:`, error);
    }
  }

  async notifyAuctionEnd(auction, creator, winner, allBids) {
    try {
      // –ò—â–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
      const channelId = process.env.AUCTION_CHANNEL_ID || process.env.GENERAL_CHANNEL_ID;
      if (!channelId) {
        logger.warn('No auction notification channel configured');
        return;
      }

      const channel = await this.client.channels.fetch(channelId);
      if (!channel) {
        logger.warn(`Auction notification channel ${channelId} not found`);
        return;
      }

      const { EmbedBuilder } = await import('discord.js');
      
      const embed = new EmbedBuilder()
        .setTitle('üèÅ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω')
        .setColor(winner ? 0x00ff00 : 0xff0000)
        .addFields(
          {
            name: '–¢–æ–≤–∞—Ä',
            value: auction.itemName,
            inline: true,
          },
          {
            name: 'ID –∞—É–∫—Ü–∏–æ–Ω–∞',
            value: `\`${auction.id}\``,
            inline: true,
          },
          {
            name: '–°–æ–∑–¥–∞—Ç–µ–ª—å',
            value: `<@${creator.discordId}>`,
            inline: true,
          }
        );

      if (winner) {
        embed.addFields(
          {
            name: 'üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å',
            value: `<@${winner.bidder.discordId}>`,
            inline: true,
          },
          {
            name: 'üí∞ –í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞',
            value: `${winner.amount} –º–æ–Ω–µ—Ç`,
            inline: true,
          },
          {
            name: 'üìä –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫',
            value: `${allBids.length}`,
            inline: true,
          }
        );

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Å—Ç–∞–≤–∫–∏
        if (allBids.length > 1) {
          const topBids = allBids.slice(0, 3).map((bid, index) => 
            `${index + 1}. <@${bid.bidder.discordId}> - ${bid.amount} –º–æ–Ω–µ—Ç`
          ).join('\n');
          
          embed.addFields({
            name: 'üèÖ –¢–æ–ø —Å—Ç–∞–≤–∫–∏',
            value: topBids,
            inline: false,
          });
        }
      } else {
        embed.addFields({
          name: '‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç',
          value: '–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫',
          inline: false,
        });
      }

      embed.setTimestamp();

      await channel.send({
        content: winner ? `<@${winner.bidder.discordId}>` : undefined,
        embeds: [embed],
      });

    } catch (error) {
      logger.error('Error sending auction end notification:', error);
    }
  }
}
