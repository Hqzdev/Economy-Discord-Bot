import db from '../database/jsonDb.js';
import logger from '../utils/logger.js';

export class AuctionManager {
  constructor(client) {
    this.client = client;
    this.checkInterval = 30000; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    this.isRunning = false;
  }

  start() {
    if (this.isRunning) return;
    
    this.isRunning = true;
    logger.info('AuctionManager started');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    this.checkAuctions();
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    this.interval = setInterval(() => {
      this.checkAuctions();
    }, this.checkInterval);
  }

  stop() {
    if (!this.isRunning) return;
    
    this.isRunning = false;
    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
    logger.info('AuctionManager stopped');
  }

  async checkAuctions() {
    try {
      const now = new Date();
      const activeAuctions = Array.from(db.data.auctions.values())
        .filter(auction => 
          auction.status === 'ACTIVE' && 
          new Date(auction.endTime) <= now
        );

      for (const auction of activeAuctions) {
        await this.endAuction(auction);
      }
    } catch (error) {
      logger.error('Error checking auctions:', error);
    }
  }

  async endAuction(auction) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
      const fullAuction = db.data.auctions.get(auction.id);
      if (!fullAuction) {
        logger.error(`Auction ${auction.id} not found in database`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ - —Å–Ω–∞—á–∞–ª–∞ –ø–æ Discord ID, –ø–æ—Ç–æ–º –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID
      let creator = db.getUserByDiscordId(fullAuction.creatorId);
      if (!creator) {
        // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID
        creator = db.data.users.get(fullAuction.creatorId);
      }
      if (!creator) {
        logger.error(`Creator ${fullAuction.creatorId} not found for auction ${auction.id}`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
      const bids = db.getAuctionBids(auction.id);
      
      if (bids.length === 0) {
        // –ù–µ—Ç —Å—Ç–∞–≤–æ–∫ - –∞—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        db.updateAuctionStatus(auction.id, 'ENDED_NO_BIDS');
        logger.info(`üèÅ –ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–Å–ù –ë–ï–ó –°–¢–ê–í–û–ö: ${auction.itemName} (ID: ${auction.id})`);
        logger.info(`‚ùå –ü–û–ë–ï–î–ò–¢–ï–õ–¨: –ù–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è`);
        logger.info(`üìä –í–°–ï–ì–û –°–¢–ê–í–û–ö: 0`);
        logger.info(`‚è∞ –í–†–ï–ú–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø: ${new Date().toISOString()}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∞—É–∫—Ü–∏–æ–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫
        await this.logAuctionResult(fullAuction, creator, null, bids);
        
        await this.notifyAuctionEnd(fullAuction, creator, null, bids);
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Å—Ç–∞–≤–∫–∞)
      const winner = bids[0]; // bids —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É–∫—Ü–∏–æ–Ω–∞
      db.updateAuctionStatus(auction.id, 'ENDED');
      db.setAuctionWinner(auction.id, winner.bidderId, winner.amount);
      
      logger.info(`üèÜ –ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–Å–ù: ${auction.itemName} (ID: ${auction.id})`);
      logger.info(`üëë –ü–û–ë–ï–î–ò–¢–ï–õ–¨: <@${winner.bidder.discordId}> (${winner.bidder.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`);
      logger.info(`üí∞ –í–´–ò–ì–†–´–®–ù–ê–Ø –°–¢–ê–í–ö–ê: ${winner.amount} –º–æ–Ω–µ—Ç`);
      logger.info(`üìä –í–°–ï–ì–û –°–¢–ê–í–û–ö: ${bids.length}`);
      logger.info(`‚è∞ –í–†–ï–ú–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø: ${new Date().toISOString()}`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
      await this.logAuctionResult(fullAuction, creator, winner, bids);
      
      await this.notifyAuctionEnd(fullAuction, creator, winner, bids);
      
    } catch (error) {
      logger.error(`Error ending auction ${auction.id}:`, error);
    }
  }

  async notifyAuctionEnd(auction, creator, winner, allBids) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const channelId = process.env.AUCTION_NOTIFICATION_CHANNEL_ID || process.env.GENERAL_CHANNEL_ID;
      if (!channelId) {
        logger.warn('No auction notification channel configured (AUCTION_NOTIFICATION_CHANNEL_ID)');
        return;
      }
      
      const channel = await this.client.channels.fetch(channelId);
      if (!channel) {
        logger.warn(`Auction notification channel ${channelId} not found`);
        return;
      }
      
      if (!channel.send) {
        logger.warn(`Auction notification channel ${channel.id} is not a text channel (type: ${channel.type})`);
        return;
      }

      const { EmbedBuilder } = await import('discord.js');
      
      const embed = new EmbedBuilder()
        .setDescription(`\`\`\` ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–Å–ù ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\`\`\``)
        .setColor(winner ? 0x00ff00 : 0xff0000)
        .addFields(
          {
            name: '–¢–æ–≤–∞—Ä',
            value: auction.itemName,
            inline: true,
          },
          {
            name: 'ID –∞—É–∫—Ü–∏–æ–Ω–∞',
            value: `\`${auction.id}\``,
            inline: true,
          },
          {
            name: '–°–æ–∑–¥–∞—Ç–µ–ª—å',
            value: `<@${creator.discordId}> (${creator.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`,
            inline: true,
          }
        );

      if (winner) {
        embed.addFields(
          {
            name: 'üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å',
            value: `<@${winner.bidder.discordId}> (${winner.bidder.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`,
            inline: true,
          },
          {
            name: 'üí∞ –í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞',
            value: `${winner.amount} –º–æ–Ω–µ—Ç`,
            inline: true,
          },
          {
            name: 'üìä –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫',
            value: `${allBids.length}`,
            inline: true,
          }
        );

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Å—Ç–∞–≤–∫–∏
        if (allBids.length > 1) {
          const topBids = allBids.slice(0, 3).map((bid, index) => 
            `${index + 1}. <@${bid.bidder.discordId}> (${bid.bidder.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}) - ${bid.amount} –º–æ–Ω–µ—Ç`
          ).join('\n');
          
          embed.addFields({
            name: 'üèÖ –¢–æ–ø —Å—Ç–∞–≤–∫–∏',
            value: topBids,
            inline: false,
          });
        }
      } else {
        embed.addFields({
          name: '‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç',
          value: '–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫',
          inline: false,
        });
      }

      embed.setTimestamp();

      await channel.send({
        content: winner ? `<@${winner.bidder.discordId}>` : undefined,
        embeds: [embed],
      });

      // Update forum thread with winner information
      if (auction.threadId) {
        try {
          const thread = await this.client.channels.fetch(auction.threadId);
          if (thread) {
            // Update thread name to show it's closed
            const newName = `[–ó–ê–ö–†–´–¢] ${auction.itemName} - ${winner ? `${winner.amount} <:steamworkshop_collection_8776158:1423962802640650351>` : '–ë–µ–∑ —Å—Ç–∞–≤–æ–∫'}`;
            await thread.setName(newName);
            
            // Send winner announcement in forum
            const { EmbedBuilder } = await import('discord.js');
            const winnerEmbed = new EmbedBuilder()
              .setDescription(`\`\`\` ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–Å–ù ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\`\`\``)
              .setColor(winner ? 0x00ff00 : 0xff0000)
              .addFields(
                {
                  name: 'üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç',
                  value: winner ? 
                    `**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** <@${winner.bidder.discordId}> (${winner.bidder.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})\n**–í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞:** ${winner.amount} <:steamworkshop_collection_8776158:1423962802640650351>\n**–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:** ${allBids.length}` :
                    '‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫',
                  inline: false,
                }
              )
              .setTimestamp();

            if (winner && allBids.length > 1) {
              const topBids = allBids.slice(0, 3).map((bid, index) => 
                `${index + 1}. <@${bid.bidder.discordId}> (${bid.bidder.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}) - ${bid.amount} <:steamworkshop_collection_8776158:1423962802640650351>`
              ).join('\n');
              
              winnerEmbed.addFields({
                name: 'üèÖ –¢–æ–ø —Å—Ç–∞–≤–∫–∏',
                value: topBids,
                inline: false,
              });
            }

            await thread.send({
              content: winner ? `<@${winner.bidder.discordId}>` : undefined,
              embeds: [winnerEmbed],
            });
            
            logger.info(`Updated auction forum thread: ${auction.threadId} for auction ${auction.id}`);
          }
        } catch (error) {
          logger.error(`Error updating auction forum thread ${auction.threadId}:`, error);
        }
      }

      // Send detailed notification to admin log channel
      const adminChannelId = process.env.ADMIN_LOG_CHANNEL_ID;
      if (adminChannelId) {
        const adminChannel = await this.client.channels.fetch(adminChannelId);
        if (adminChannel && adminChannel.send) {
          const adminEmbed = new EmbedBuilder()
            .setDescription(`\`\`\` ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–Å–ù - –ê–î–ú–ò–ù –õ–û–ì ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\`\`\``)
            .setColor(0x7b9e1e)
            .addFields(
              {
                name: 'ID –∞—É–∫—Ü–∏–æ–Ω–∞',
                value: `\`${auction.id}\``,
                inline: true,
              },
              {
                name: '–¢–æ–≤–∞—Ä',
                value: auction.itemName,
                inline: true,
              },
              {
                name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                value: auction.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                inline: true,
              },
              {
                name: '–°–æ–∑–¥–∞—Ç–µ–ª—å',
                value: `<@${creator.discordId}> (${creator.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`,
                inline: true,
              },
              {
                name: '–ú–∏–Ω. —Ü–µ–Ω–∞',
                value: `${auction.minPrice} `,
                inline: true,
              },
              {
                name: '–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫',
                value: `${allBids.length}`,
                inline: true,
              }
            );

          if (winner) {
            adminEmbed.addFields(
              {
                name: 'üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å',
                value: `<@${winner.bidder.discordId}> (${winner.bidder.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`,
                inline: true,
              },
              {
                name: 'üí∞ –í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞',
                value: `${winner.amount} `,
                inline: true,
              },
              {
                name: 'üìä –¢–æ–ø —Å—Ç–∞–≤–∫–∏',
                value: allBids.slice(0, 5).map((bid, index) => 
                  `${index + 1}. <@${bid.bidder.discordId}> (${bid.bidder.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}) - ${bid.amount} `
                ).join('\n') || '–ù–µ—Ç —Å—Ç–∞–≤–æ–∫',
                inline: false,
              }
            );
          } else {
            adminEmbed.addFields({
              name: '–†–µ–∑—É–ª—å—Ç–∞—Ç',
              value: '‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫',
              inline: false,
            });
          }

          adminEmbed.setTimestamp();

          await adminChannel.send({
            embeds: [adminEmbed],
          });
        }
      }

    } catch (error) {
      logger.error('Error sending auction end notification:', error);
    }
  }

  async logAuctionResult(auction, creator, winner, allBids) {
    try {
      const logData = {
        auctionId: auction.id,
        itemName: auction.itemName,
        description: auction.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
        category: auction.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        minPrice: auction.minPrice,
        creator: {
          discordId: creator.discordId,
          username: creator.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        },
        endTime: auction.endTime,
        totalBids: allBids.length,
        bids: allBids.map(bid => ({
          bidderId: bid.bidder.discordId,
          bidderUsername: bid.bidder.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          amount: bid.amount,
          timestamp: bid.timestamp
        })),
        result: winner ? {
          winnerId: winner.bidder.discordId,
          winnerUsername: winner.bidder.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          winningAmount: winner.amount,
          status: 'COMPLETED'
        } : {
          status: 'NO_BIDS'
        },
        timestamp: new Date().toISOString()
      };

      // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
      logger.info('AUCTION_RESULT', logData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
      if (!db.data.auctionLogs) {
        db.data.auctionLogs = new Map();
      }
      
      db.data.auctionLogs.set(auction.id, logData);
      db.save();

    } catch (error) {
      logger.error('Error logging auction result:', error);
    }
  }
}
