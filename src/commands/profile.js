const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('profile')
        .setDescription('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        .addUserOption(option =>
            option.setName('user')
                .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è')
                .setRequired(false)),
    
    async execute(interaction) {
        const targetUser = interaction.options.getUser('user') || interaction.user;
        const isOwnProfile = targetUser.id === interaction.user.id;

        try {
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
            const mockProfile = {
                userId: targetUser.id,
                username: targetUser.username,
                avatar: targetUser.displayAvatarURL(),
                joinDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
                reputation: 85,
                totalSales: 42,
                totalPurchases: 28,
                activeDeals: 3,
                completedDeals: 70,
                canceledDeals: 2,
                totalVolume: 125000,
                favoriteCategory: '–û—Ä—É–∂–∏–µ',
                achievements: ['–ù–∞–¥–µ–∂–Ω—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü', '–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å', '–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü']
            };

            const embed = new EmbedBuilder()
                .setTitle(`üë§ –ü—Ä–æ—Ñ–∏–ª—å ${targetUser.username}`)
                .setDescription(isOwnProfile ? '–í–∞—à —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å' : `–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.username}`)
                .setThumbnail(targetUser.displayAvatarURL())
                .setColor(0x303135)
                .setTimestamp()
                .addFields(
                    { name: 'üìä –†–µ–ø—É—Ç–∞—Ü–∏—è', value: `${mockProfile.reputation}/100`, inline: true },
                    { name: 'üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', value: `<t:${Math.floor(mockProfile.joinDate.getTime() / 1000)}:d>`, inline: true },
                    { name: 'üèÜ –õ—é–±–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', value: mockProfile.favoriteCategory, inline: true },
                    { name: 'üí∞ –ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤', value: mockProfile.totalSales.toString(), inline: true },
                    { name: 'üõí –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤', value: mockProfile.totalPurchases.toString(), inline: true },
                    { name: 'ü§ù –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫', value: mockProfile.activeDeals.toString(), inline: true },
                    { name: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫', value: mockProfile.completedDeals.toString(), inline: true },
                    { name: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫', value: mockProfile.canceledDeals.toString(), inline: true },
                    { name: 'üíé –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç', value: `${mockProfile.totalVolume.toLocaleString()} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'}`, inline: true }
                );

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if (mockProfile.achievements.length > 0) {
                embed.addFields({
                    name: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                    value: mockProfile.achievements.map(achievement => `‚Ä¢ ${achievement}`).join('\n'),
                    inline: false
                });
            }

            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º
            const buttons = [];
            
            if (isOwnProfile) {
                buttons.push(
                    new ButtonBuilder()
                        .setCustomId('profile_edit')
                        .setLabel('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('profile_settings')
                        .setLabel('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
                        .setStyle(ButtonStyle.Secondary)
                );
            }

            buttons.push(
                new ButtonBuilder()
                    .setCustomId(`profile_deals_${targetUser.id}`)
                    .setLabel('üìã –°–¥–µ–ª–∫–∏')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId(`profile_reputation_${targetUser.id}`)
                    .setLabel('‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è')
                    .setStyle(ButtonStyle.Secondary)
            );

            const row = new ActionRowBuilder().addComponents(buttons);

            await interaction.reply({ 
                embeds: [embed], 
                components: buttons.length > 0 ? [row] : [] 
            });

        } catch (error) {
            console.error('Error showing profile:', error);
            await interaction.reply({ 
                content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.', 
                ephemeral: true 
            });
        }
    }
};
