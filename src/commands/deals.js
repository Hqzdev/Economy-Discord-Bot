const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } = require('discord.js');
const memoryStorage = require('../utils/memoryStorage');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('deals')
        .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏'),
    
    async execute(interaction) {
        await handleDealsMenu(interaction);
    }
};

async function handleDealsMenu(interaction) {
    const embed = new EmbedBuilder()
        .setTitle('üìã –°–¥–µ–ª–∫–∏')
        .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:')
        .setColor(0x303135)
        .setTimestamp();

    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('deals_active')
                .setLabel('üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('deals_history')
                .setLabel('üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.reply({ 
        embeds: [embed], 
        components: [row] 
    });
}

async function handleActiveDeals(interaction) {
    const userId = interaction.user.id;
    const activeDeals = memoryStorage.getActiveUserDeals(userId);

    const embed = new EmbedBuilder()
        .setTitle('üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏')
        .setColor(0x303135)
        .setTimestamp();

    if (activeDeals.length === 0) {
        embed.setDescription('üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫');
    } else {
        embed.setDescription('–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:');
        
        activeDeals.forEach(deal => {
            const role = deal.buyerId === userId ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' : '–ü—Ä–æ–¥–∞–≤–µ—Ü';
            const partner = deal.buyerId === userId ? deal.sellerId : deal.buyerId;
            const statusEmoji = deal.status === 'active' ? '‚úÖ' : '‚è≥';
            
            embed.addFields({
                name: `${statusEmoji} ${deal.item.title}`,
                value: `üí∞ **${deal.price}** ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'} | ${role} | üë§ <@${partner}>\nüìÖ –°–æ–∑–¥–∞–Ω–∞: <t:${Math.floor(deal.createdAt.getTime() / 1000)}:R>`,
                inline: false
            });
        });
    }

    // Select menu –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
    if (activeDeals.length > 0) {
        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('active_deal_select')
            .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
            .setMinValues(1)
            .setMaxValues(1);

        activeDeals.forEach(deal => {
            const role = deal.buyerId === userId ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' : '–ü—Ä–æ–¥–∞–≤–µ—Ü';
            selectMenu.addOptions({
                label: deal.item.title,
                description: `${deal.price} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'} | ${role}`,
                value: `deal_${deal.id}`,
                emoji: 'ü§ù'
            });
        });

        const row1 = new ActionRowBuilder().addComponents(selectMenu);
        const row2 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('deals_menu')
                    .setLabel('üîô –ù–∞–∑–∞–¥')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.update({ 
            embeds: [embed], 
            components: [row1, row2] 
        });
    } else {
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('deals_menu')
                    .setLabel('üîô –ù–∞–∑–∞–¥')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.update({ 
            embeds: [embed], 
            components: [row] 
        });
    }
}

async function handleDealsHistory(interaction) {
    const userId = interaction.user.id;
    const completedDeals = memoryStorage.getCompletedUserDeals(userId);

    const embed = new EmbedBuilder()
        .setTitle('üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫')
        .setDescription('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:')
        .setColor(0x303135)
        .setTimestamp();

    if (completedDeals.length === 0) {
        embed.setDescription('üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫');
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
        completedDeals.slice(0, 10).forEach(deal => {
            const role = deal.buyerId === userId ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' : '–ü—Ä–æ–¥–∞–≤–µ—Ü';
            const partner = deal.buyerId === userId ? deal.sellerId : deal.buyerId;
            const statusEmoji = deal.status === 'completed' ? '‚úÖ' : '‚ùå';
            const statusText = deal.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' : '–û—Ç–º–µ–Ω–µ–Ω–∞';
            
            embed.addFields({
                name: `${statusEmoji} ${deal.item.title} - ${statusText}`,
                value: `üí∞ **${deal.price}** ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'} | ${role} | üë§ <@${partner}>\nüìÖ <t:${Math.floor(deal.updatedAt.getTime() / 1000)}:R>`,
                inline: false
            });
        });
    }

    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('deals_menu')
                .setLabel('üîô –ù–∞–∑–∞–¥')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.update({ 
        embeds: [embed], 
        components: [row] 
    });
}

async function handleDealDetails(interaction, dealId) {
    const deal = memoryStorage.deals.get(parseInt(dealId));
    
    if (!deal) {
        await interaction.reply({ content: '‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', flags: 64 });
        return;
    }

    const userId = interaction.user.id;
    const isParticipant = deal.buyerId === userId || deal.sellerId === userId;
    
    if (!isParticipant) {
        await interaction.reply({ content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.', flags: 64 });
        return;
    }

    const role = deal.buyerId === userId ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' : '–ü—Ä–æ–¥–∞–≤–µ—Ü';
    const partner = deal.buyerId === userId ? deal.sellerId : deal.buyerId;
    const statusEmoji = deal.status === 'active' ? '‚úÖ' : deal.status === 'completed' ? 'üèÅ' : '‚ùå';
    const statusText = deal.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞—è' : 
                      deal.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' : '–û—Ç–º–µ–Ω–µ–Ω–∞';

    const embed = new EmbedBuilder()
        .setTitle(`üìã –°–¥–µ–ª–∫–∞ #${deal.id}`)
        .setDescription(`**${deal.item.title}**`)
        .addFields(
            { name: 'üí∞ –¶–µ–Ω–∞', value: `${deal.price} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'}`, inline: true },
            { name: 'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', value: deal.quantity.toString(), inline: true },
            { name: 'üìä –°—Ç–∞—Ç—É—Å', value: `${statusEmoji} ${statusText}`, inline: true },
            { name: 'üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü', value: `<@${deal.sellerId}>`, inline: true },
            { name: 'üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', value: `<@${deal.buyerId}>`, inline: true },
            { name: 'üé≠ –í–∞—à–∞ —Ä–æ–ª—å', value: role, inline: true },
            { name: 'üìÖ –°–æ–∑–¥–∞–Ω–∞', value: `<t:${Math.floor(deal.createdAt.getTime() / 1000)}:F>`, inline: false }
        )
        .setColor(deal.status === 'completed' ? 0x00ff00 : deal.status === 'canceled' ? 0xff0000 : 0x9932cc)
        .setTimestamp();

    if (deal.item.description) {
        embed.addFields({ name: 'üìù –û–ø–∏—Å–∞–Ω–∏–µ', value: deal.item.description, inline: false });
    }

    const buttons = [];
    
    if (deal.status === 'pending' || deal.status === 'active') {
        buttons.push(
            new ButtonBuilder()
                .setCustomId(`deal_confirm_${deal.id}`)
                .setLabel('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
                .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
                .setCustomId(`deal_cancel_${deal.id}`)
                .setLabel('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
                .setStyle(ButtonStyle.Danger)
        );
        
        if (deal.status === 'active') {
            buttons.push(
                new ButtonBuilder()
                    .setCustomId(`deal_complete_${deal.id}`)
                    .setLabel('üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å')
                    .setStyle(ButtonStyle.Primary)
            );
        }
    }

    buttons.push(
        new ButtonBuilder()
            .setCustomId('deals_active')
            .setLabel('üîô –ù–∞–∑–∞–¥')
            .setStyle(ButtonStyle.Secondary)
    );

    const row = new ActionRowBuilder().addComponents(buttons);

    await interaction.reply({ 
        embeds: [embed], 
        components: [row],
        flags: 64
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ index.js
module.exports.handleDealsMenu = handleDealsMenu;
module.exports.handleActiveDeals = handleActiveDeals;
module.exports.handleDealsHistory = handleDealsHistory;
module.exports.handleDealDetails = handleDealDetails;