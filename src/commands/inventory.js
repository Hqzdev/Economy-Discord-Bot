const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const Inventory = require('../models/Inventory');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('inventory')
        .setDescription('–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è'),
    
    async execute(interaction) {
        try {
            const userId = interaction.user.id;
            const inventoryItems = await Inventory.findByUser(userId);

            const embed = new EmbedBuilder()
                .setTitle('üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å')
                .setColor(0x303135)
                .setTimestamp();

            if (inventoryItems.length === 0) {
                embed.setDescription('üì≠ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/sell` —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.');
            } else {
                embed.setDescription(`–£ –≤–∞—Å ${inventoryItems.length} ${inventoryItems.length === 1 ? '–ø—Ä–µ–¥–º–µ—Ç' : '–ø—Ä–µ–¥–º–µ—Ç–æ–≤'}:`);
                
                inventoryItems.forEach((item, index) => {
                    embed.addFields({
                        name: `${index + 1}. ${item.title}`,
                        value: `üì¶ **${item.quantity}** —à—Ç. | üí∞ ${item.price} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'} | üìÇ ${item.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}`,
                        inline: false
                    });
                });
            }

            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('refresh_inventory')
                        .setLabel('üîÑ –û–±–Ω–æ–≤–∏—Ç—å')
                        .setStyle(ButtonStyle.Secondary)
                );

            if (inventoryItems.length > 0) {
                row.addComponents(
                    new ButtonBuilder()
                        .setCustomId('sell_from_inventory')
                        .setLabel('üí∞ –ü—Ä–æ–¥–∞—Ç—å')
                        .setStyle(ButtonStyle.Primary)
                );
            }

            await interaction.reply({ 
                embeds: [embed], 
                components: [row],
                flags: 64
            });

        } catch (error) {
            console.error('Error showing inventory:', error);
            await interaction.reply({ 
                content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.', 
                flags: 64 
            });
        }
    }
};
