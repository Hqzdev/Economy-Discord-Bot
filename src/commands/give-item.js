const { SlashCommandBuilder, EmbedBuilder, StringSelectMenuBuilder, ActionRowBuilder } = require('discord.js');
const Item = require('../models/Item');
const Inventory = require('../models/Inventory');
const User = require('../models/User');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('give-item')
        .setDescription('–í—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)')
        .addUserOption(option =>
            option.setName('user')
                .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä')
                .setRequired(true))
        .addIntegerOption(option =>
            option.setName('quantity')
                .setDescription('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤—ã–¥–∞—á–∏')
                .setRequired(true)
                .setMinValue(1)),
    
    async execute(interaction) {
        try {
            // Check if user is admin
            const user = await User.findByDiscordId(interaction.user.id);
            if (!user || !user.isAdmin()) {
                await interaction.reply({ 
                    content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–æ–≤. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.', 
                    flags: 64 
                });
                return;
            }

            const targetUser = interaction.options.getUser('user');
            const quantity = interaction.options.getInteger('quantity');

            // Get all available items
            const items = await Item.findActive('', '', 'title', 'ASC', 100, 0);

            if (items.length === 0) {
                await interaction.reply({ 
                    content: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏.', 
                    flags: 64 
                });
                return;
            }

            const embed = new EmbedBuilder()
                .setTitle('üéÅ –í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞')
                .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${targetUser.id}> (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity}):`)
                .setColor(0x303135)
                .setTimestamp();

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId(`give_item_${targetUser.id}_${quantity}`)
                .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –≤—ã–¥–∞—á–∏')
                .setMinValues(1)
                .setMaxValues(1);

            items.slice(0, 25).forEach(item => {
                selectMenu.addOptions({
                    label: item.title.substring(0, 100),
                    description: `${item.price} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'} | ${item.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}`,
                    value: `item_${item.id}`,
                    emoji: 'üéÅ'
                });
            });

            const row = new ActionRowBuilder().addComponents(selectMenu);

            await interaction.reply({ 
                embeds: [embed], 
                components: [row],
                flags: 64
            });

        } catch (error) {
            console.error('Error showing give item menu:', error);
            await interaction.reply({ 
                content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.', 
                flags: 64 
            });
        }
    }
};
