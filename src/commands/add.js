const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const User = require('../models/User');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('add')
        .setDescription('[ADMIN] –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        .addUserOption(option =>
            option.setName('user')
                .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                .setRequired(true))
        .addIntegerOption(option =>
            option.setName('amount')
                .setDescription('–°—É–º–º–∞')
                .setRequired(true)
                .setMinValue(1))
        .addStringOption(option =>
            option.setName('type')
                .setDescription('–ö—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å')
                .setRequired(true)
                .addChoices(
                    { name: '–ö—ç—à', value: 'cash' },
                    { name: '–ë–∞–Ω–∫', value: 'bank' }
                ))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    
    async execute(interaction) {
        try {
            // Check if user has administrator permissions
            if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
                await interaction.reply({ 
                    content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.', 
                    flags: 64 
                });
                return;
            }

            const targetUser = interaction.options.getUser('user');
            const amount = interaction.options.getInteger('amount');
            const type = interaction.options.getString('type');

            // Get or create target user
            let user = await User.findByDiscordId(targetUser.id);
            if (!user) {
                user = await User.create(targetUser.id, targetUser.username, []);
            }

            // Add money
            if (type === 'cash') {
                await user.addCash(amount);
            } else {
                await user.addBank(amount);
            }

            const embed = new EmbedBuilder()
                .setTitle('‚úÖ –î–µ–Ω—å–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUser} –¥–æ–±–∞–≤–ª–µ–Ω–æ **${amount}** ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'} –≤ ${type === 'cash' ? '–∫—ç—à' : '–±–∞–Ω–∫'}.`)
                .addFields(
                    { name: 'üí∞ –ö—ç—à', value: `${user.cash} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'}`, inline: true },
                    { name: 'üè¶ –ë–∞–Ω–∫', value: `${user.bank} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'}`, inline: true }
                )
                .setColor(0x303135)
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
        } catch (error) {
            console.error('Error executing add command:', error);
            await interaction.reply({ 
                content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤.', 
                flags: 64 
            });
        }
    }
};

