const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } = require('discord.js');
const Item = require('../models/Item');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('buy')
        .setDescription('–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤'),
    
    async execute(interaction) {
        try {
            const embed = new EmbedBuilder()
                .setTitle('üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞')
                .setDescription('–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ:')
                .setColor(0x303135)
                .setTimestamp();

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            const activeItems = await Item.getSortedItems('title', 'ASC', 50);

            if (activeItems.length === 0) {
                embed.setDescription('üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                
                const row = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('refresh_market')
                            .setLabel('üîÑ –û–±–Ω–æ–≤–∏—Ç—å')
                            .setStyle(ButtonStyle.Secondary)
                    );

                await interaction.reply({ 
                    embeds: [embed], 
                    components: [row] 
                });
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ª–æ—Ç–æ–≤ –≤ embed
            activeItems.slice(0, 10).forEach((item, index) => {
                const quantityText = item.quantity > 0 ? `${item.quantity} —à—Ç.` : '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏';
                embed.addFields({
                    name: `${index + 1}. ${item.title}`,
                    value: `üí∞ **${item.price}** ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'} | üì¶ ${quantityText} | üë§ <@${item.sellerId}>`,
                    inline: false
                });
            });

            // –°–æ–∑–¥–∞–µ–º select menu –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ 25 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('buy_item_select')
                .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏')
                .setMinValues(1)
                .setMaxValues(1);

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º > 0
            const availableItems = activeItems.filter(item => item.quantity > 0);
            
            availableItems.slice(0, 25).forEach(item => {
                selectMenu.addOptions({
                    label: item.title.substring(0, 100),
                    description: `${item.price} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'} | ${item.quantity} —à—Ç.`,
                    value: `item_${item.id}`,
                    emoji: 'üõí'
                });
            });

            const row1 = new ActionRowBuilder().addComponents(selectMenu);
            
            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            const row2 = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('refresh_market')
                        .setLabel('üîÑ –û–±–Ω–æ–≤–∏—Ç—å')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('sort_by_price')
                        .setLabel('üí∞ –ü–æ —Ü–µ–Ω–µ')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('sort_by_name')
                        .setLabel('üìù –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é')
                        .setStyle(ButtonStyle.Secondary)
                );

            await interaction.reply({ 
                embeds: [embed], 
                components: [row1, row2] 
            });

        } catch (error) {
            console.error('Error showing buy menu:', error);
            await interaction.reply({ 
                content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.', 
                flags: 64 
            });
        }
    }
};
