import { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits, ButtonBuilder, ButtonStyle, ActionRowBuilder, StringSelectMenuBuilder } from 'discord.js';
import { UI_CONSTANTS, TEXTS, EMBED_COLORS } from '../utils/constants.js';
import { ListingService } from '../services/simpleListingService.js';
import { AuctionService } from '../services/simpleAuctionService.js';
import { DealService } from '../services/simpleDealService.js';
import { createMainMenuButtons } from '../ui/components.js';
import db from '../database/jsonDb.js';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const marketUpdateIntervals = new Map();

const data = new SlashCommandBuilder()
  .setName('admin')
  .setDescription('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –º–µ–Ω—é')
  .setDefaultMemberPermissions(PermissionFlagsBits.Administrator);

async function execute(interaction) {
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    await showAdminMainMenu(interaction);
  } catch (error) {
    console.error('Error in admin command:', error);
    await interaction.reply({
      content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã',
      ephemeral: true,
    });
  }
}

async function showAdminMainMenu(interaction) {
  const listingService = new ListingService();
  const auctionService = new AuctionService();

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const [listingStats, auctionStats] = await Promise.all([
    listingService.getListingStats(),
    auctionService.getAuctionStats(),
  ]);

  const embed = new EmbedBuilder()
    .setTitle('‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å')
    .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ')
    .setColor(EMBED_COLORS.INFO)
    .addFields(
      {
        name: 'üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        value: `**–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤:** ${listingStats.active}\n**–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤:** ${auctionStats.scheduled}\n**–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:** ${listingStats.total || 0}`,
        inline: true,
      },
      {
        name: 'üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è',
        value: '‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–æ–º\n‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        inline: true,
      }
    )
    .setTimestamp()
    .setFooter({ 
      text: `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${interaction.user.username}`,
      iconURL: interaction.user.displayAvatarURL()
    });

  const row1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_market')
        .setLabel('üè™ –†—ã–Ω–æ–∫')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('üè™'),
      new ButtonBuilder()
        .setCustomId('admin_cleanup')
        .setLabel('üßπ –û—á–∏—Å—Ç–∫–∞')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('üßπ')
    );

  const row2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_logs')
        .setLabel('üìã –õ–æ–≥–∏')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üìã'),
      new ButtonBuilder()
        .setCustomId('admin_stats')
        .setLabel('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üìà')
    );

  await interaction.reply({
    embeds: [embed],
    components: [row1, row2],
    ephemeral: true,
  });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async function showMarketMenu(interaction) {
  const embed = new EmbedBuilder()
    .setTitle('üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–æ–º')
    .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ä—ã–Ω–∫–∞')
    .setColor(EMBED_COLORS.INFO)
    .addFields(
      {
        name: 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è',
        value: '‚Ä¢ **–°–æ–∑–¥–∞—Ç—å** - –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ\n‚Ä¢ **–û–±–Ω–æ–≤–∏—Ç—å** - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n‚Ä¢ **–£–¥–∞–ª–∏—Ç—å** - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        inline: false,
      }
    )
    .setTimestamp();

  const row1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_market_create')
        .setLabel('–°–æ–∑–¥–∞—Ç—å')
        .setStyle(ButtonStyle.Success)
        .setEmoji('‚úÖ'),
      new ButtonBuilder()
        .setCustomId('admin_market_update')
        .setLabel('–û–±–Ω–æ–≤–∏—Ç—å')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('üîÑ')
    );

  const row2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_market_remove')
        .setLabel('–£–¥–∞–ª–∏—Ç—å')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('üóëÔ∏è'),
      new ButtonBuilder()
        .setCustomId('admin_back')
        .setLabel('–ù–∞–∑–∞–¥')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('‚¨ÖÔ∏è')
    );

  await interaction.update({
    embeds: [embed],
    components: [row1, row2],
  });
}

async function showCleanupMenu(interaction) {
  const embed = new EmbedBuilder()
    .setTitle('üßπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏')
    .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏')
    .setColor(EMBED_COLORS.WARNING)
    .addFields(
      {
        name: '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ',
        value: '–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.',
        inline: false,
      },
      {
        name: 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è',
        value: '‚Ä¢ **–¢–æ–≤–∞—Ä—ã** - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å —Ä—ã–Ω–∫–∞\n‚Ä¢ **–ê—É–∫—Ü–∏–æ–Ω—ã** - –£–¥–∞–ª–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω—ã\n‚Ä¢ **–°–¥–µ–ª–∫–∏** - –£–¥–∞–ª–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏',
        inline: false,
      }
    )
    .setTimestamp();

  const row1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_cleanup_listings')
        .setLabel('üõí –¢–æ–≤–∞—Ä—ã')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('üõí'),
      new ButtonBuilder()
        .setCustomId('admin_cleanup_auctions')
        .setLabel('üî® –ê—É–∫—Ü–∏–æ–Ω—ã')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('üî®')
    );

  const row2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_cleanup_deals')
        .setLabel('ü§ù –°–¥–µ–ª–∫–∏')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('ü§ù'),
      new ButtonBuilder()
        .setCustomId('admin_back')
        .setLabel('–ù–∞–∑–∞–¥')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('‚¨ÖÔ∏è')
    );

  await interaction.update({
    embeds: [embed],
    components: [row1, row2],
  });
}

async function showLogsMenu(interaction) {
  const embed = new EmbedBuilder()
    .setTitle('üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤')
    .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞')
    .setColor(EMBED_COLORS.INFO)
    .addFields(
      {
        name: 'üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏',
        value: '‚Ä¢ **–ê—É–∫—Ü–∏–æ–Ω—ã** - –õ–æ–≥–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤\n‚Ä¢ **–ê—É–¥–∏—Ç** - –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        inline: false,
      }
    )
    .setTimestamp();

  const row1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_logs_auctions')
        .setLabel('–ê—É–∫—Ü–∏–æ–Ω—ã')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('üî®'),
      new ButtonBuilder()
        .setCustomId('admin_logs_audit')
        .setLabel('–ê—É–¥–∏—Ç')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üìù')
    );

  const row2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_back')
        .setLabel('–ù–∞–∑–∞–¥')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('‚¨ÖÔ∏è')
    );

  await interaction.update({
    embeds: [embed],
    components: [row1, row2],
  });
}

async function showStatsMenu(interaction) {
  const listingService = new ListingService();
  const auctionService = new AuctionService();

  const [listingStats, auctionStats] = await Promise.all([
    listingService.getListingStats(),
    auctionService.getAuctionStats(),
  ]);

  const embed = new EmbedBuilder()
    .setTitle('üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    .setDescription('–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã')
    .setColor(EMBED_COLORS.SUCCESS)
    .addFields(
      {
        name: 'üõí –¢–æ–≤–∞—Ä—ã –∏ –ª–æ—Ç—ã',
        value: `**–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤:** ${listingStats.active}\n**–í—Å–µ–≥–æ –ª–æ—Ç–æ–≤:** ${listingStats.total || 0}\n**–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö:** ${(listingStats.total || 0) - listingStats.active}`,
        inline: true,
      },
      {
        name: 'üî® –ê—É–∫—Ü–∏–æ–Ω—ã',
        value: `**–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤:** ${auctionStats.scheduled}\n**–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö:** ${auctionStats.completed || 0}\n**–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:** ${auctionStats.totalBids || 0}`,
        inline: true,
      },
      {
        name: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
        value: `**–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** ${Array.from(db.data.users.values()).length}\n**–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:** ${new Set(Array.from(db.data.listings.values()).map(l => l.sellerId)).size}`,
        inline: true,
      },
      {
        name: 'üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
        value: `**–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** ${Math.round(require('fs').statSync(require('path').join(__dirname, '../../data/market.json')).size / 1024)} KB\n**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** <t:${Math.floor(Date.now() / 1000)}:R>`,
        inline: false,
      }
    )
    .setTimestamp()
    .setFooter({ 
      text: `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${interaction.user.username}`,
      iconURL: interaction.user.displayAvatarURL()
    });

  const row = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_back')
        .setLabel('–ù–∞–∑–∞–¥')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('‚¨ÖÔ∏è')
    );

  await interaction.update({
    embeds: [embed],
    components: [row],
  });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
async function handleMarketCreate(interaction) {
  try {
    const channel = interaction.channel;
    
    if (!channel.isTextBased()) {
      return await interaction.reply({
        content: '‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º',
        ephemeral: true,
      });
    }

    const listingService = new ListingService();
    const auctionService = new AuctionService();

    const [listingStats, auctionStats] = await Promise.all([
      listingService.getListingStats(),
      auctionService.getAuctionStats(),
    ]);

    const imageUrl = 'https://cdn.discordapp.com/attachments/1423960996547924009/1424077421715652668/126-1921x1080-desktop-hd-skyrim-wallpaper-image.jpg?ex=68e2a2f3&is=68e15173&hm=995e0f273f4985292377b6c7f42388f0ba0afd2fd8ffb30abb71bb9761d1f165&';

    // –ü–µ—Ä–≤—ã–π —ç–º–±–µ–¥ - —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞
    const imageEmbed = new EmbedBuilder()
      .setImage(imageUrl)
      .setColor(0x7b9e1e);

    // –í—Ç–æ—Ä–æ–π —ç–º–±–µ–¥ - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    const embed = new EmbedBuilder()
      .setDescription(`\`\`\` ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –†—ã–Ω–æ–∫ –ú–∞—Ä–∫–∞—Ä—Ç–∞ ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä \`\`\`

–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞–º–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏`)
      .setColor(0x7b9e1e)
      .addFields(
        {
          name: '**–ë–∞—Ä–æ–Ω**',
          value: `\`\`\`ansi
[2;32m[1;32m[4;32m[1;32m[0m[4;32m[0m[1;32m[0m[2;32m–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ú–∞—Ä–∫–∞—Ä—Ç–∞. –ü–æ–º–∏–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–∏—Å–∫–æ—Ä–¥. –ë–∞—Ä–æ–Ω –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∑–∞–π–º—ã –∏–ª–∏ —Ä–∞–∑–º–µ–Ω–∏–≤–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ö –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞.\`\`\``,
          inline: false,
        },
        {
          name: '**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç**',
          value: `**–ü–æ–∫—É–ø–∫–∞**
<:1_:1423962783535337552> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ‚Üí –°–æ–∑–¥–∞—ë—Ç—Å—è –≤–µ—Ç–∫–∞

**–ü—Ä–æ–¥–∞–∂–∞**
<:1_:1423962783535337552> –°–æ–∑–¥–∞–π—Ç–µ –ª–æ—Ç ‚Üí <:6_:1423966899443601449> –ñ–¥–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π

**–ê—É–∫—Ü–∏–æ–Ω—ã**
<:1_:1423962783535337552> <:6_:1423966899443601449> –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç–æ—Ä–≥–∞—Ö`,
          inline: false,
        }
      )
      .setImage('https://cdn.discordapp.com/attachments/1423960996547924009/1424764693888897126/f39a806ba38943de1b7dd60db0c63cdd881f408f2faf9d5afe95edd5795e9143.gif?ex=68e52305&is=68e3d185&hm=98812ed949c63c86270cc6e2e6b619136d26c4b5da2edd66f60b6ebba08a83b5&');

    const row1 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(UI_CONSTANTS.BUTTON_IDS.BUY)
          .setLabel('–ö—É–ø–∏—Ç—å')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423965832740081684'),
        new ButtonBuilder()
          .setCustomId(UI_CONSTANTS.BUTTON_IDS.SELL)
          .setLabel('–ü—Ä–æ–¥–∞—Ç—å')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423966433884373052'),
        new ButtonBuilder()
          .setCustomId(UI_CONSTANTS.BUTTON_IDS.AUCTION)
          .setLabel('–ê—É–∫—Ü–∏–æ–Ω—ã')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423965583963328633')
      );

    const row2 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(UI_CONSTANTS.BUTTON_IDS.DEALS)
          .setLabel('–°–¥–µ–ª–∫–∏')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423975784292552765'),
        new ButtonBuilder()
          .setCustomId('market_stats')
          .setLabel('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423973804467814400'),
        new ButtonBuilder()
          .setCustomId('market_help')
          .setLabel('–ü–æ–º–æ—â—å')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423974435228225556')
      );

    const message = await channel.send({
      embeds: [imageEmbed, embed],
      components: [row1, row2],
    });

    db.setPersistentMessage('market', channel.id, message.id);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    startMarketAutoUpdate(interaction.client, channel.id, message.id);

    await interaction.reply({
      content: `‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ ${channel}\n\nüìù **ID —Å–æ–æ–±—â–µ–Ω–∏—è:** \`${message.id}\`\nüîÑ **–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç`,
      ephemeral: true,
    });

  } catch (error) {
    console.error('Error creating market:', error);
    await interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞',
      ephemeral: true,
    });
  }
}

async function handleMarketUpdate(interaction) {
  try {
    const persistentMessage = db.getPersistentMessage('market');
    
    if (!persistentMessage) {
      return await interaction.reply({
        content: '‚ùå –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        ephemeral: true,
      });
    }

    const channel = await interaction.client.channels.fetch(persistentMessage.channelId);
    if (!channel) {
      return await interaction.reply({
        content: '‚ùå –ö–∞–Ω–∞–ª —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω',
        ephemeral: true,
      });
    }

    const message = await channel.messages.fetch(persistentMessage.messageId);
    if (!message) {
      return await interaction.reply({
        content: '‚ùå –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ',
        ephemeral: true,
      });
    }

    const listingService = new ListingService();
    const auctionService = new AuctionService();

    const [listingStats, auctionStats] = await Promise.all([
      listingService.getListingStats(),
      auctionService.getAuctionStats(),
    ]);

    const imageUrl = 'https://cdn.discordapp.com/attachments/1423960996547924009/1424077421715652668/126-1921x1080-desktop-hd-skyrim-wallpaper-image.jpg?ex=68e2a2f3&is=68e15173&hm=995e0f273f4985292377b6c7f42388f0ba0afd2fd8ffb30abb71bb9761d1f165&';

    // –ü–µ—Ä–≤—ã–π —ç–º–±–µ–¥ - —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞
    const imageEmbed = new EmbedBuilder()
      .setImage(imageUrl)
      .setColor(0x7b9e1e);

    // –í—Ç–æ—Ä–æ–π —ç–º–±–µ–¥ - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    const embed = new EmbedBuilder()
      .setDescription(`\`\`\` ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –†—ã–Ω–æ–∫ –ú–∞—Ä–∫–∞—Ä—Ç–∞ ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä \`\`\`

–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞–º–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏`)
      .setColor(0x7b9e1e)
      .addFields(
        {
          name: '**–ë–∞—Ä–æ–Ω**',
          value: `\`\`\`__–ë–∞—Ä–æ–Ω __- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ú–∞—Ä–∫–∞—Ä—Ç–∞. –ü–æ–º–∏–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–∏—Å–∫–æ—Ä–¥. –ë–∞—Ä–æ–Ω –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∑–∞–π–º—ã –∏–ª–∏ —Ä–∞–∑–º–µ–Ω–∏–≤–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ö –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞.\`\`\``,
          inline: false,
        },
        {
          name: '**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç**',
          value: `**–ü–æ–∫—É–ø–∫–∞**
<:1_:1423962783535337552> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ‚Üí –°–æ–∑–¥–∞—ë—Ç—Å—è –≤–µ—Ç–∫–∞

**–ü—Ä–æ–¥–∞–∂–∞**
<:1_:1423962783535337552> –°–æ–∑–¥–∞–π—Ç–µ –ª–æ—Ç ‚Üí <:6_:1423966899443601449> –ñ–¥–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π

**–ê—É–∫—Ü–∏–æ–Ω—ã**
<:1_:1423962783535337552> <:6_:1423966899443601449> –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç–æ—Ä–≥–∞—Ö`,
          inline: false,
        }
      );

    const row1 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(UI_CONSTANTS.BUTTON_IDS.BUY)
          .setLabel('–ö—É–ø–∏—Ç—å')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423965832740081684'),
        new ButtonBuilder()
          .setCustomId(UI_CONSTANTS.BUTTON_IDS.SELL)
          .setLabel('–ü—Ä–æ–¥–∞—Ç—å')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423966433884373052'),
        new ButtonBuilder()
          .setCustomId(UI_CONSTANTS.BUTTON_IDS.AUCTION)
          .setLabel('–ê—É–∫—Ü–∏–æ–Ω—ã')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423965583963328633')
      );

    const row2 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(UI_CONSTANTS.BUTTON_IDS.DEALS)
          .setLabel('–°–¥–µ–ª–∫–∏')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423975784292552765'),
        new ButtonBuilder()
          .setCustomId('market_stats')
          .setLabel('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423973804467814400'),
        new ButtonBuilder()
          .setCustomId('market_help')
          .setLabel('–ü–æ–º–æ—â—å')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423974435228225556')
      );

    await message.edit({
      embeds: [imageEmbed, embed],
      components: [row1, row2],
    });

    await interaction.reply({
      content: `‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n\nüìä **–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\nüõí –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤: ${listingStats.active}\nüî® –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤: ${auctionStats.scheduled}`,
      ephemeral: true,
    });

  } catch (error) {
    console.error('Error updating market:', error);
    await interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞',
      ephemeral: true,
    });
  }
}

async function handleMarketRemove(interaction) {
  try {
    const persistentMessage = db.getPersistentMessage('market');
    
    if (!persistentMessage) {
      return await interaction.reply({
        content: '‚ùå –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        ephemeral: true,
      });
    }

    const channel = await interaction.client.channels.fetch(persistentMessage.channelId);
    if (channel) {
      try {
        const message = await channel.messages.fetch(persistentMessage.messageId);
        if (message) {
          await message.delete();
        }
      } catch (error) {
        console.log('Message already deleted or not found');
      }
    }

    db.removePersistentMessage('market');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    stopMarketAutoUpdate(persistentMessage.channelId, persistentMessage.messageId);

    await interaction.reply({
      content: `‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–æ\n\nüìù **–£–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\nüÜî ID: \`${persistentMessage.messageId}\`\nüì∫ –ö–∞–Ω–∞–ª: <#${persistentMessage.channelId}>\nüõë **–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`,
      ephemeral: true,
    });

  } catch (error) {
    console.error('Error removing market:', error);
    await interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞',
      ephemeral: true,
    });
  }
}

async function showListingsManagement(interaction) {
  const allListings = Array.from(db.data.listings.values());
  const activeListings = allListings.filter(listing => listing.status === 'ACTIVE');
  const inactiveListings = allListings.filter(listing => listing.status !== 'ACTIVE' || listing.quantityAvailable <= 0);

  const embed = new EmbedBuilder()
    .setTitle('üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏')
    .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–∞ —Ä—ã–Ω–∫–µ')
    .setColor(EMBED_COLORS.WARNING)
    .addFields(
      {
        name: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤',
        value: `**–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:** ${allListings.length}\n**–ê–∫—Ç–∏–≤–Ω—ã—Ö:** ${activeListings.length}\n**–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö:** ${inactiveListings.length}`,
        inline: false,
      },
      {
        name: '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ',
        value: '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!',
        inline: false,
      }
    )
    .setTimestamp();

  const selectMenu = new StringSelectMenuBuilder()
    .setCustomId('admin_listings_select')
    .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏')
    .addOptions([
      {
        label: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã',
        description: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Ä—ã–Ω–∫–∞',
        value: 'delete_all',
        emoji: 'üóëÔ∏è',
      },
      {
        label: '–£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ',
        description: '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º',
        value: 'delete_inactive',
        emoji: '‚ùå',
      },
      {
        label: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã',
        description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è',
        value: 'show_all',
        emoji: 'üëÅÔ∏è',
      },
    ]);

  const row1 = new ActionRowBuilder().addComponents(selectMenu);
  const row2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_back')
        .setLabel('–ù–∞–∑–∞–¥')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('‚¨ÖÔ∏è')
    );

  await interaction.update({
    embeds: [embed],
    components: [row1, row2],
  });
}

async function showAuctionsManagement(interaction) {
  const allAuctions = Array.from(db.data.auctions.values());
  const activeAuctions = allAuctions.filter(auction => auction.status === 'ACTIVE');
  const completedAuctions = allAuctions.filter(auction => auction.status === 'COMPLETED' || auction.status === 'CANCELLED');

  const embed = new EmbedBuilder()
    .setTitle('üî® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏')
    .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏')
    .setColor(EMBED_COLORS.WARNING)
    .addFields(
      {
        name: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤',
        value: `**–í—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:** ${allAuctions.length}\n**–ê–∫—Ç–∏–≤–Ω—ã—Ö:** ${activeAuctions.length}\n**–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö:** ${completedAuctions.length}`,
        inline: false,
      },
      {
        name: '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ',
        value: '–£–¥–∞–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!',
        inline: false,
      }
    )
    .setTimestamp();

  const selectMenu = new StringSelectMenuBuilder()
    .setCustomId('admin_auctions_select')
    .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏')
    .addOptions([
      {
        label: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã',
        description: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã',
        value: 'delete_all',
        emoji: 'üóëÔ∏è',
      },
      {
        label: '–£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ',
        description: '–£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã',
        value: 'delete_completed',
        emoji: '‚úÖ',
      },
      {
        label: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã',
        description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è',
        value: 'show_all',
        emoji: 'üëÅÔ∏è',
      },
    ]);

  const row1 = new ActionRowBuilder().addComponents(selectMenu);
  const row2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_back')
        .setLabel('–ù–∞–∑–∞–¥')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('‚¨ÖÔ∏è')
    );

  await interaction.update({
    embeds: [embed],
    components: [row1, row2],
  });
}

async function handleCleanup(interaction, type) {
  try {
    let deletedListings = 0;
    let deletedAuctions = 0;
    let deletedDeals = 0;

    const embed = new EmbedBuilder()
      .setColor(EMBED_COLORS.SUCCESS)
      .setDescription(`\`\`\` ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –û–ß–ò–°–¢–ö–ê –†–´–ù–ö–ê ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\`\`\``)
      .setTimestamp()
      .setFooter({ 
        text: `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${interaction.user.username}`,
        iconURL: interaction.user.displayAvatarURL()
      });

    if (type === 'listings' || type === 'all') {
      const allListings = Array.from(db.data.listings.values());
      const inactiveListings = allListings.filter(listing => 
        listing.status !== 'ACTIVE' || listing.quantityAvailable <= 0
      );
      
      for (const listing of inactiveListings) {
        db.data.listings.delete(listing.id);
        deletedListings++;
      }
    }

    if (type === 'auctions' || type === 'all') {
      const allAuctions = Array.from(db.data.auctions.values());
      const completedAuctions = allAuctions.filter(auction => 
        auction.status === 'COMPLETED' || auction.status === 'CANCELLED'
      );
      
      for (const auction of completedAuctions) {
        db.data.auctions.delete(auction.id);
        deletedAuctions++;
      }
    }

    if (type === 'deals' || type === 'all') {
      const allDeals = Array.from(db.data.deals.values());
      const closedDeals = allDeals.filter(deal => 
        deal.status === 'COMPLETED' || deal.status === 'CANCELLED' || deal.status === 'CLOSED'
      );
      
      for (const deal of closedDeals) {
        db.data.deals.delete(deal.id);
        deletedDeals++;
      }
    }

    db.save();

    let description = '–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n';
    
    if (type === 'listings' || type === 'all') {
      description += `üóëÔ∏è **–£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:** ${deletedListings}\n`;
    }
    
    if (type === 'auctions' || type === 'all') {
      description += `üóëÔ∏è **–£–¥–∞–ª–µ–Ω–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:** ${deletedAuctions}\n`;
    }
    
    if (type === 'deals' || type === 'all') {
      description += `üóëÔ∏è **–£–¥–∞–ª–µ–Ω–æ —Å–¥–µ–ª–æ–∫:** ${deletedDeals}\n`;
    }

    if (deletedListings === 0 && deletedAuctions === 0 && deletedDeals === 0) {
      description = '–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å - –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω—ã.';
    }

    embed.setDescription(description);

    await interaction.reply({
      embeds: [embed],
      ephemeral: true,
    });

  } catch (error) {
    console.error('Error in cleanup:', error);
    await interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏',
      ephemeral: true,
    });
  }
}

async function handleAuctionLogs(interaction) {
  try {
    if (!db.data.auctionLogs) {
      return await interaction.reply({
        content: '‚ùå –õ–æ–≥–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        ephemeral: true,
      });
    }

    let logs = Array.from(db.data.auctionLogs.values());
    logs = logs
      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
      .slice(0, 10);

    if (logs.length === 0) {
      return await interaction.reply({
        content: '‚ùå –õ–æ–≥–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        ephemeral: true,
      });
    }

    const embed = new EmbedBuilder()
      .setColor(EMBED_COLORS.INFO)
      .setDescription(`\`\`\` ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –õ–û–ì–ò –ê–£–ö–¶–ò–û–ù–û–í ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\`\`\``)
      .setTimestamp()
      .setFooter({ 
        text: `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${interaction.user.username}`,
        iconURL: interaction.user.displayAvatarURL()
      });

    for (const log of logs) {
      const resultText = log.result.status === 'COMPLETED' 
        ? `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <@${log.result.winnerId}> (${log.result.winnerUsername})\nüí∞ –í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${log.result.winningAmount} `
        : '‚ùå –ë–µ–∑ —Å—Ç–∞–≤–æ–∫';

      const bidsText = log.bids.length > 0 
        ? log.bids.slice(0, 3).map(bid => 
            `‚Ä¢ <@${bid.bidderId}> - ${bid.amount} `
          ).join('\n') + (log.bids.length > 3 ? `\n... –∏ –µ—â–µ ${log.bids.length - 3} —Å—Ç–∞–≤–æ–∫` : '')
        : '–ù–µ—Ç —Å—Ç–∞–≤–æ–∫';

      embed.addFields({
        name: `üî® –ê—É–∫—Ü–∏–æ–Ω #${log.auctionId} - ${log.itemName}`,
        value: `**–°–æ–∑–¥–∞—Ç–µ–ª—å:** <@${log.creator.discordId}> (${log.creator.username})\n**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** ${log.category}\n**–ú–∏–Ω. —Ü–µ–Ω–∞:** ${log.minPrice} \n**–°—Ç–∞–≤–æ–∫:** ${log.totalBids}\n**–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${resultText}\n**–¢–æ–ø —Å—Ç–∞–≤–∫–∏:**\n${bidsText}`,
        inline: false,
      });
    }

    await interaction.reply({
      embeds: [embed],
      ephemeral: true,
    });

  } catch (error) {
    console.error('Error in auction logs:', error);
    await interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–æ–≤',
      ephemeral: true,
    });
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
async function handleListingsDelete(interaction, action) {
  try {
    const allListings = Array.from(db.data.listings.values());
    let deletedCount = 0;

    if (action === 'delete_all') {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
      for (const listing of allListings) {
        db.data.listings.delete(listing.id);
        deletedCount++;
      }
    } else if (action === 'delete_inactive') {
      // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
      const inactiveListings = allListings.filter(listing => 
        listing.status !== 'ACTIVE' || listing.quantityAvailable <= 0
      );
      for (const listing of inactiveListings) {
        db.data.listings.delete(listing.id);
        deletedCount++;
      }
    }

    db.save();

    const embed = new EmbedBuilder()
      .setColor(EMBED_COLORS.SUCCESS)
      .setDescription(`\`\`\` ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–û–í ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\`\`\``)
      .addFields({
        name: '–†–µ–∑—É–ª—å—Ç–∞—Ç',
        value: `üóëÔ∏è **–£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:** ${deletedCount}\n\n${deletedCount === 0 ? '–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å' : '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!'}`,
        inline: false,
      })
      .setTimestamp()
      .setFooter({ 
        text: `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${interaction.user.username}`,
        iconURL: interaction.user.displayAvatarURL()
      });

    await interaction.reply({
      embeds: [embed],
      ephemeral: true,
    });

  } catch (error) {
    console.error('Error deleting listings:', error);
    await interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤',
      ephemeral: true,
    });
  }
}

async function handleAuctionsDelete(interaction, action) {
  try {
    const allAuctions = Array.from(db.data.auctions.values());
    let deletedCount = 0;

    if (action === 'delete_all') {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã
      for (const auction of allAuctions) {
        db.data.auctions.delete(auction.id);
        deletedCount++;
      }
    } else if (action === 'delete_completed') {
      // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã
      const completedAuctions = allAuctions.filter(auction => 
        auction.status === 'COMPLETED' || auction.status === 'CANCELLED'
      );
      for (const auction of completedAuctions) {
        db.data.auctions.delete(auction.id);
        deletedCount++;
      }
    }

    db.save();

    const embed = new EmbedBuilder()
      .setColor(EMBED_COLORS.SUCCESS)
      .setDescription(`\`\`\` ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –£–î–ê–õ–ï–ù–ò–ï –ê–£–ö–¶–ò–û–ù–û–í ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\`\`\``)
      .addFields({
        name: '–†–µ–∑—É–ª—å—Ç–∞—Ç',
        value: `üóëÔ∏è **–£–¥–∞–ª–µ–Ω–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:** ${deletedCount}\n\n${deletedCount === 0 ? '–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å' : '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!'}`,
        inline: false,
      })
      .setTimestamp()
      .setFooter({ 
        text: `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${interaction.user.username}`,
        iconURL: interaction.user.displayAvatarURL()
      });

    await interaction.reply({
      embeds: [embed],
      ephemeral: true,
    });

  } catch (error) {
    console.error('Error deleting auctions:', error);
    await interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤',
      ephemeral: true,
    });
  }
}

async function showListingsList(interaction) {
  try {
    const allListings = Array.from(db.data.listings.values());
    
    if (allListings.length === 0) {
      await interaction.reply({
        content: '‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        ephemeral: true,
      });
      return;
    }

    const embed = new EmbedBuilder()
      .setTitle('üõí –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤')
      .setDescription('–í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Ä—ã–Ω–∫–µ')
      .setColor(EMBED_COLORS.INFO)
      .setTimestamp();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
    for (const listing of allListings.slice(0, 10)) {
      const status = listing.status === 'ACTIVE' ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
      embed.addFields({
        name: `${listing.itemName} (ID: ${listing.id})`,
        value: `**–°—Ç–∞—Ç—É—Å:** ${status}\n**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** ${listing.quantityAvailable}\n**–¶–µ–Ω–∞:** ${listing.price} <:steamworkshop_collection_8776158:1423962802640650351>\n**–ü—Ä–æ–¥–∞–≤–µ—Ü:** <@${listing.sellerId}>`,
        inline: true,
      });
    }

    if (allListings.length > 10) {
      embed.setFooter({ text: `–ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ ${allListings.length} —Ç–æ–≤–∞—Ä–æ–≤` });
    }

    await interaction.reply({
      embeds: [embed],
      ephemeral: true,
    });

  } catch (error) {
    console.error('Error showing listings list:', error);
    await interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤',
      ephemeral: true,
    });
  }
}

async function showAuctionsList(interaction) {
  try {
    const allAuctions = Array.from(db.data.auctions.values());
    
    if (allAuctions.length === 0) {
      await interaction.reply({
        content: '‚ùå –ê—É–∫—Ü–∏–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        ephemeral: true,
      });
      return;
    }

    const embed = new EmbedBuilder()
      .setTitle('üî® –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤')
      .setDescription('–í—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ')
      .setColor(EMBED_COLORS.INFO)
      .setTimestamp();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∞—É–∫—Ü–∏–æ–Ω–æ–≤
    for (const auction of allAuctions.slice(0, 10)) {
      const status = auction.status === 'ACTIVE' ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 
                    auction.status === 'COMPLETED' ? '‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω' : 
                    auction.status === 'CANCELLED' ? '‚ùå –û—Ç–º–µ–Ω—ë–Ω' : '‚è∏Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      embed.addFields({
        name: `${auction.itemName} (ID: ${auction.id})`,
        value: `**–°—Ç–∞—Ç—É—Å:** ${status}\n**–ú–∏–Ω. —Ü–µ–Ω–∞:** ${auction.minPrice} <:steamworkshop_collection_8776158:1423962802640650351>\n**–°–æ–∑–¥–∞—Ç–µ–ª—å:** <@${auction.creatorId}>\n**–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è:** <t:${Math.floor(new Date(auction.endTime).getTime() / 1000)}:R>`,
        inline: true,
      });
    }

    if (allAuctions.length > 10) {
      embed.setFooter({ text: `–ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ ${allAuctions.length} –∞—É–∫—Ü–∏–æ–Ω–æ–≤` });
    }

    await interaction.reply({
      embeds: [embed],
      ephemeral: true,
    });

  } catch (error) {
    console.error('Error showing auctions list:', error);
    await interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤',
      ephemeral: true,
    });
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
function startMarketAutoUpdate(client, channelId, messageId) {
  const key = `${channelId}-${messageId}`;
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (marketUpdateIntervals.has(key)) {
    clearInterval(marketUpdateIntervals.get(key));
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç (600000 –º—Å)
  const interval = setInterval(async () => {
    try {
      await updateMarketMessage(client, channelId, messageId);
    } catch (error) {
      console.error('Error in market auto-update:', error);
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      stopMarketAutoUpdate(channelId, messageId);
    }
  }, 600000); // 10 –º–∏–Ω—É—Ç

  marketUpdateIntervals.set(key, interval);
  console.log(`Market auto-update started for channel ${channelId}, message ${messageId}`);
}

function stopMarketAutoUpdate(channelId, messageId) {
  const key = `${channelId}-${messageId}`;
  
  if (marketUpdateIntervals.has(key)) {
    clearInterval(marketUpdateIntervals.get(key));
    marketUpdateIntervals.delete(key);
    console.log(`Market auto-update stopped for channel ${channelId}, message ${messageId}`);
  }
}

async function updateMarketMessage(client, channelId, messageId) {
  try {
    const channel = await client.channels.fetch(channelId);
    if (!channel) {
      console.log(`Channel ${channelId} not found, stopping auto-update`);
      stopMarketAutoUpdate(channelId, messageId);
      return;
    }

    const message = await channel.messages.fetch(messageId);
    if (!message) {
      console.log(`Message ${messageId} not found, stopping auto-update`);
      stopMarketAutoUpdate(channelId, messageId);
      return;
    }

    const listingService = new ListingService();
    const auctionService = new AuctionService();

    const [listingStats, auctionStats] = await Promise.all([
      listingService.getListingStats(),
      auctionService.getAuctionStats(),
    ]);

    const imageUrl = 'https://cdn.discordapp.com/attachments/1423960996547924009/1424077421715652668/126-1921x1080-desktop-hd-skyrim-wallpaper-image.jpg?ex=68e2a2f3&is=68e15173&hm=995e0f273f4985292377b6c7f42388f0ba0afd2fd8ffb30abb71bb9761d1f165&';

    // –ü–µ—Ä–≤—ã–π —ç–º–±–µ–¥ - —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞
    const imageEmbed = new EmbedBuilder()
      .setImage(imageUrl)
      .setColor(0x7b9e1e);

    // –í—Ç–æ—Ä–æ–π —ç–º–±–µ–¥ - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    const embed = new EmbedBuilder()
      .setDescription(`\`\`\` ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –†—ã–Ω–æ–∫ –ú–∞—Ä–∫–∞—Ä—Ç–∞ ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä \`\`\`

–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞–º–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏`)
      .setColor(0x7b9e1e)
      .addFields(
        {
          name: '**–ë–∞—Ä–æ–Ω**',
          value: `\`\`\`__–ë–∞—Ä–æ–Ω __- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ú–∞—Ä–∫–∞—Ä—Ç–∞. –ü–æ–º–∏–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–∏—Å–∫–æ—Ä–¥. –ë–∞—Ä–æ–Ω –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∑–∞–π–º—ã –∏–ª–∏ —Ä–∞–∑–º–µ–Ω–∏–≤–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ö –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞.\`\`\``,
          inline: false,
        },
        {
          name: '**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç**',
          value: `**–ü–æ–∫—É–ø–∫–∞**
<:1_:1423962783535337552> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ‚Üí –°–æ–∑–¥–∞—ë—Ç—Å—è –≤–µ—Ç–∫–∞

**–ü—Ä–æ–¥–∞–∂–∞**
<:1_:1423962783535337552> –°–æ–∑–¥–∞–π—Ç–µ –ª–æ—Ç ‚Üí <:6_:1423966899443601449> –ñ–¥–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π

**–ê—É–∫—Ü–∏–æ–Ω—ã**
<:1_:1423962783535337552> <:6_:1423966899443601449> –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç–æ—Ä–≥–∞—Ö`,
          inline: false,
        }
      );

    const row1 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(UI_CONSTANTS.BUTTON_IDS.BUY)
          .setLabel('–ö—É–ø–∏—Ç—å')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423965832740081684'),
        new ButtonBuilder()
          .setCustomId(UI_CONSTANTS.BUTTON_IDS.SELL)
          .setLabel('–ü—Ä–æ–¥–∞—Ç—å')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423966433884373052'),
        new ButtonBuilder()
          .setCustomId(UI_CONSTANTS.BUTTON_IDS.AUCTION)
          .setLabel('–ê—É–∫—Ü–∏–æ–Ω—ã')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423965583963328633')
      );

    const row2 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(UI_CONSTANTS.BUTTON_IDS.DEALS)
          .setLabel('–°–¥–µ–ª–∫–∏')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423975784292552765'),
        new ButtonBuilder()
          .setCustomId('market_stats')
          .setLabel('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423973804467814400'),
        new ButtonBuilder()
          .setCustomId('market_help')
          .setLabel('–ü–æ–º–æ—â—å')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('1423974435228225556')
      );

    await message.edit({
      embeds: [imageEmbed, embed],
      components: [row1, row2],
    });

    console.log(`Market message updated: ${listingStats.active} listings, ${auctionStats.scheduled} auctions`);

  } catch (error) {
    console.error('Error updating market message:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
export function restoreMarketAutoUpdates(client) {
  const persistentMessage = db.getPersistentMessage('market');
  if (persistentMessage) {
    startMarketAutoUpdate(client, persistentMessage.channelId, persistentMessage.messageId);
    console.log('Market auto-update restored after bot restart');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
export {
  showAdminMainMenu,
  showMarketMenu,
  showCleanupMenu,
  showLogsMenu,
  showStatsMenu,
  showListingsManagement,
  showAuctionsManagement,
  handleMarketCreate,
  handleMarketUpdate,
  handleMarketRemove,
  handleCleanup,
  handleAuctionLogs,
  handleListingsDelete,
  handleAuctionsDelete,
  showListingsList,
  showAuctionsList,
  startMarketAutoUpdate,
  stopMarketAutoUpdate,
  updateMarketMessage
};

export default { data, execute };
