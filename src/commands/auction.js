const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } = require('discord.js');
const memoryStorage = require('../utils/memoryStorage');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('auction')
        .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏')
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('create')
                .setDescription('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω')
                .addStringOption(option =>
                    option.setName('item')
                        .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
                        .setRequired(true))
                .addIntegerOption(option =>
                    option.setName('min_bid')
                        .setDescription('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞')
                        .setRequired(true))
                .addIntegerOption(option =>
                    option.setName('duration_hours')
                        .setDescription('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ —á–∞—Å–∞—Ö')
                        .setRequired(false)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('bid')
                .setDescription('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω')
                .addStringOption(option =>
                    option.setName('auction_id')
                        .setDescription('ID –∞—É–∫—Ü–∏–æ–Ω–∞')
                        .setRequired(true))
                .addIntegerOption(option =>
                    option.setName('amount')
                        .setDescription('–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏')
                        .setRequired(true))),
    
    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();

        switch (subcommand) {
            case 'list':
                await handleAuctionList(interaction);
                break;
            case 'create':
                await handleAuctionCreate(interaction);
                break;
            case 'bid':
                await handleAuctionBid(interaction);
                break;
        }
    }
};

async function handleAuctionList(interaction) {
    const embed = new EmbedBuilder()
        .setTitle('üî® –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã')
        .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–∫—Ü–∏–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Å—Ç–∞–≤–∫–∏:')
        .setColor(0x303135)
        .setTimestamp();

    // –ó–∞–≥–ª—É—à–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const mockAuctions = [
        { 
            id: 1, 
            item: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—á', 
            minBid: 5000, 
            currentBid: 7500, 
            bidder: '–ò–≥—Ä–æ–∫#1234',
            timeLeft: '2—á 30–º',
            seller: '–¢–æ—Ä–≥–æ–≤–µ—Ü#5678'
        },
        { 
            id: 2, 
            item: '–î—Ä–∞–∫–æ–Ω—å—è –±—Ä–æ–Ω—è', 
            minBid: 8000, 
            currentBid: 8000, 
            bidder: null,
            timeLeft: '1—á 15–º',
            seller: '–†—ã—Ü–∞—Ä—å#9999'
        },
        { 
            id: 3, 
            item: '–ö–æ–ª—å—Ü–æ —Å–∏–ª—ã', 
            minBid: 3000, 
            currentBid: 4500, 
            bidder: '–ú–∞–≥#1111',
            timeLeft: '45–º',
            seller: '–ê–ª—Ö–∏–º–∏–∫#2222'
        }
    ];

    mockAuctions.forEach(auction => {
        const timeLeft = auction.timeLeft;
        const currentBidder = auction.bidder ? `üë§ ${auction.bidder}` : '‚ùå –ù–µ—Ç —Å—Ç–∞–≤–æ–∫';
        
        embed.addFields({
            name: `üî® ${auction.item}`,
            value: `üí∞ **–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞:** ${auction.currentBid} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'}\n‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** ${timeLeft}\n${currentBidder}\nüë§ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** ${auction.seller}`,
            inline: true
        });
    });

    // Select menu –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—É–∫—Ü–∏–æ–Ω–∞
    const selectMenu = new StringSelectMenuBuilder()
        .setCustomId('auction_select')
        .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–∫—Ü–∏–æ–Ω –¥–ª—è —Å—Ç–∞–≤–∫–∏')
        .setMinValues(1)
        .setMaxValues(1);

    mockAuctions.forEach(auction => {
        selectMenu.addOptions({
            label: auction.item,
            description: `–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${auction.currentBid} | –û—Å—Ç–∞–ª–æ—Å—å: ${auction.timeLeft}`,
            value: `auction_${auction.id}`,
            emoji: 'üî®'
        });
    });

    const row1 = new ActionRowBuilder().addComponents(selectMenu);
    
    const row2 = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('refresh_auctions')
                .setLabel('üîÑ –û–±–Ω–æ–≤–∏—Ç—å')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('my_auctions')
                .setLabel('üìã –ú–æ–∏ –∞—É–∫—Ü–∏–æ–Ω—ã')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('my_bids')
                .setLabel('üí∞ –ú–æ–∏ —Å—Ç–∞–≤–∫–∏')
                .setStyle(ButtonStyle.Primary)
        );

    await interaction.reply({ 
        embeds: [embed], 
        components: [row1, row2] 
    });
}

async function handleAuctionCreate(interaction) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞
    const auctionRoleId = process.env.AUCTION_ROLE_ID;
    const member = interaction.member;
    
    if (auctionRoleId && !member.roles.cache.has(auctionRoleId)) {
        await interaction.reply({ 
            content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–æ–ª—å.', 
            flags: 64 
        });
        return;
    }

    const item = interaction.options.getString('item');
    const minBid = interaction.options.getInteger('min_bid');
    const durationHours = interaction.options.getInteger('duration_hours') || 24;

    // –°–æ–∑–¥–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω –≤ –ø–∞–º—è—Ç–∏
    const auction = memoryStorage.createAuction(interaction.user.id, item, minBid, durationHours);

    const embed = new EmbedBuilder()
        .setTitle('‚úÖ –ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω!')
        .setDescription(`**–¢–æ–≤–∞—Ä:** ${item}`)
        .addFields(
            { name: 'üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞', value: `${minBid} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'}`, inline: true },
            { name: '‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: `${durationHours} —á–∞—Å–æ–≤`, inline: true },
            { name: 'üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å', value: `<@${interaction.user.id}>`, inline: true },
            { name: 'üÜî ID –∞—É–∫—Ü–∏–æ–Ω–∞', value: `#${auction.id}`, inline: true },
            { name: '‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ', value: `<t:${Math.floor(auction.endTime.getTime() / 1000)}:F>`, inline: false }
        )
        .setColor(0x303135)
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}

async function handleAuctionBid(interaction) {
    const auctionId = interaction.options.getString('auction_id');
    const amount = interaction.options.getInteger('amount');

    const embed = new EmbedBuilder()
        .setTitle('üí∞ –°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞!')
        .setDescription(`–°—Ç–∞–≤–∫–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω #${auctionId}`)
        .addFields(
            { name: 'üí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏', value: `${amount} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'}`, inline: true },
            { name: 'üë§ –°—Ç–∞–≤—â–∏–∫', value: `<@${interaction.user.id}>`, inline: true }
        )
        .setColor(0x303135)
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}
