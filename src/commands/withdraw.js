const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const User = require('../models/User');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('withdraw')
        .setDescription('–°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∞–Ω–∫–∞')
        .addIntegerOption(option =>
            option.setName('amount')
                .setDescription('–°—É–º–º–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è')
                .setRequired(true)
                .setMinValue(1)),
    
    async execute(interaction) {
        try {
            const amount = interaction.options.getInteger('amount');

            // Get user
            let user = await User.findByDiscordId(interaction.user.id);
            if (!user) {
                user = await User.create(interaction.user.id, interaction.user.username, []);
            }

            // Check if user has enough money in bank
            if (user.bank < amount) {
                const embed = new EmbedBuilder()
                    .setTitle('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
                    .setDescription(`–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É —Ç–æ–ª—å–∫–æ **${user.bank}** ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'}.`)
                    .setColor(0x303135)
                    .setTimestamp();

                await interaction.reply({ embeds: [embed], ephemeral: true });
                return;
            }

            // Withdraw from bank
            await user.withdrawFromBank(amount);

            const embed = new EmbedBuilder()
                .setTitle('üí∏ –°–Ω—è—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!')
                .setDescription(`–í—ã —Å–Ω—è–ª–∏ **${amount}** ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'} —Å –±–∞–Ω–∫–∞.`)
                .addFields(
                    { name: 'üí∞ –í–∞—à –∫—ç—à', value: `${user.cash} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'}`, inline: true },
                    { name: 'üè¶ –í–∞—à –±–∞–Ω–∫', value: `${user.bank} ${process.env.CURRENCY_NAME || '–∑–æ–ª–æ—Ç–æ'}`, inline: true }
                )
                .setColor(0x303135)
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
        } catch (error) {
            console.error('Error executing withdraw command:', error);
            await interaction.reply({ 
                content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤.', 
                ephemeral: true 
            });
        }
    }
};

